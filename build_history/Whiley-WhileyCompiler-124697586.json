[{"id":124697585,"repository_id":4509743,"number":"484","state":"finished","result":1,"started_at":"2016-04-21T08:57:01Z","finished_at":"2016-04-21T08:58:50Z","duration":109,"commit":"d02f0255d525dc566d90818eaec8ddf538196054","branch":"feature/620-bytecode","message":"Updating Bytecode.Compound to hold multiple blocks.\n\nIn order for Bytecode.If to have both a true and false branch, we need\nto extend Bytecode.Compount to be able to hold multiple blocks.","event_type":"push"},{"id":124644182,"repository_id":4509743,"number":"483","state":"finished","result":0,"started_at":"2016-04-21T02:56:21Z","finished_at":"2016-04-21T03:13:27Z","duration":1026,"commit":"cf49e750a9cd0347c5493eae46bdbcfc3f2d83f9","branch":"develop","message":"fix whiley.io.File","event_type":"pull_request"},{"id":124602089,"repository_id":4509743,"number":"482","state":"finished","result":0,"started_at":"2016-04-20T22:00:40Z","finished_at":"2016-04-20T22:20:49Z","duration":1209,"commit":"fecc5d5e73eb7da82e5eed0a299e1425b9f449a0","branch":"develop","message":"Merge branch 'feature/621-codegen' into develop","event_type":"push"},{"id":124431600,"repository_id":4509743,"number":"481","state":"finished","result":0,"started_at":"2016-04-20T10:17:24Z","finished_at":"2016-04-20T10:36:44Z","duration":1160,"commit":"3b64f477042c366c227ea787cbb3f75c56c03b26","branch":"feature/618-types","message":"Update Subtype unit tests\n\nThe unit tests RecordSubtypeTests and ArraySubtypeTests were quite out\nof data and contained many now invalid test cases.  These have been\nupdated and now all pass.","event_type":"push"},{"id":124430991,"repository_id":4509743,"number":"480","state":"finished","result":0,"started_at":"2016-04-20T10:14:51Z","finished_at":"2016-04-20T10:33:24Z","duration":1113,"commit":"5704dc79340472b833aa83bc95e44dec0cb472bd","branch":"develop","message":"Fix for #622 (broken test cases)\n\nSeveral test cases where not passing as a result of changes made to the\nCodeGenerator.  These are now resolved, though at least had to be done\nin a less than ideal fashion.","event_type":"push"},{"id":124401655,"repository_id":4509743,"number":"479","state":"finished","result":1,"started_at":"2016-04-20T07:40:21Z","finished_at":"2016-04-20T07:58:45Z","duration":1104,"commit":"0c23f51bd60c217a5ceba3153ad88471fca1d059","branch":"develop","message":"Merge branch 'feature/625-checks' into develop","event_type":"push"},{"id":124401593,"repository_id":4509743,"number":"478","state":"finished","result":1,"started_at":"2016-04-20T07:39:56Z","finished_at":"2016-04-20T07:59:47Z","duration":1191,"commit":"7f2e2a9265e453165b33bb3e6b0ae58b84aad01f","branch":"feature/625-checks","message":"WyC: Removed syntax checks from CodeGenerator\n\nWhere possible I have removed syntax checks from CodeGenerator, as this\nis not the place where we should be doing this.  In some cases, things\nhave just disappeared.  In other cases, I've left some internal failures\ninstead.\n\nUnfortunately, the issue of checking duplicate case labels (E509) needs\nfurther thought.  I've opened a separate issue for this #628","event_type":"push"},{"id":124344453,"repository_id":4509743,"number":"477","state":"finished","result":1,"started_at":"2016-04-19T23:53:03Z","finished_at":"2016-04-20T00:12:29Z","duration":1166,"commit":"d398a922f7ed88d860bfda904e5d9570757df679","branch":"develop","message":"Merge branch 'feature/621-codegen' into develop","event_type":"push"},{"id":124296359,"repository_id":4509743,"number":"476","state":"finished","result":1,"started_at":"2016-04-19T20:18:19Z","finished_at":"2016-04-19T20:37:27Z","duration":1148,"commit":"9c7e6e16413a7ea143a93eb1f61defc908cb096e","branch":"feature/621-codegen","message":"WyC: Finished refactoring CodeGenerator #621\n\nHave simplified the variable allocation process by dropping the\nrequirement that all local variables are allocated first.  This led to\nsome useful simplifications.\n\nLambda bytecodes remain something of a thorn as their translation is\nreally ugly.  I've opened a new issue to fix them by using a nested\nblock instead of current hack.","event_type":"push"},{"id":124295507,"repository_id":4509743,"number":"475","state":"finished","result":1,"started_at":"2016-04-19T20:15:24Z","finished_at":"2016-04-19T20:32:26Z","duration":1022,"commit":"9a940bedb819da0cdf7680310b389b71df28f0fd","branch":"feature/621-codegen","message":"WyC: Finished refactoring CodeGenerator #621\n\nHave simplified the variable allocation process by dropping the\nrequirement that all local variables are allocated first.  This led to\nsome useful simplifications.\n\nLambda bytecodes remain something of a thorn as their translation is\nreally ugly.  I've opened a new issue to fix them by using a nested\nblock instead of current hack.","event_type":"push"},{"id":124140488,"repository_id":4509743,"number":"474","state":"finished","result":1,"started_at":"2016-04-19T09:37:57Z","finished_at":"2016-04-19T09:39:52Z","duration":115,"commit":"c770dd171277795030a00e465e5a4e87f83c6a7b","branch":"feature/621-codegen","message":"WyC: Continued refactoring CodeGenerator #621\n\nHave simplified the variable allocation process by dropping the\nrequirement that all local variables are allocated first.  This led to\nsome useful simplifications, but there is still quite a bit left to do","event_type":"push"},{"id":124002796,"repository_id":4509743,"number":"473","state":"finished","result":1,"started_at":"2016-04-18T19:42:38Z","finished_at":"2016-04-18T19:44:42Z","duration":124,"commit":"e139bb1335e277b2c8213316fab3f5367d2bfdd7","branch":"feature/621-codegen","message":"WyC: Refactoring CodeGenerator #621\n\nHave merged various parameters into a single \"GenerationContext\" which\nhas tidied things up a little.  Also removed the concept of a\n\"LoopScope\" and have also folded this into the GenerationContext.  It's\nnot compiling yet, but we are getting there.","event_type":"push"},{"id":123868103,"repository_id":4509743,"number":"472","state":"finished","result":1,"started_at":"2016-04-18T10:29:46Z","finished_at":"2016-04-18T10:31:32Z","duration":106,"commit":"4a6912547ccef3322c3d8a92e9df7c6d4f309768","branch":"feature/621-codegen","message":"WyC: Begun working on #621","event_type":"push"},{"id":123840605,"repository_id":4509743,"number":"471","state":"finished","result":1,"started_at":"2016-04-18T08:22:22Z","finished_at":"2016-04-18T08:42:36Z","duration":1214,"commit":"fbbe529068ff8af759d8798d07b11c3f23c8028b","branch":"develop","message":"Merge branch 'feature/502-bytecodes' into develop","event_type":"push"},{"id":123840433,"repository_id":4509743,"number":"470","state":"finished","result":1,"started_at":"2016-04-18T08:21:49Z","finished_at":"2016-04-18T08:42:26Z","duration":1237,"commit":"3180879ce4d5257573e5f58271fbc9c3179be36f","branch":"feature/502-bytecodes","message":"WyIL: Encapsulate Constant fields\n\nThis encapsulates a bunch if previously public fields in\nwyil.lang.Constant.  Also renames CodeForest =\u003e BytecodeForest.","event_type":"push"},{"id":123838086,"repository_id":4509743,"number":"469","state":"finished","result":1,"started_at":"2016-04-18T08:08:13Z","finished_at":"2016-04-18T08:27:27Z","duration":1154,"commit":"89dc65fc706754b0e05c14dd3c1d30a7a701917d","branch":"feature/502-bytecodes","message":"WyIL: Encapsulate Constant fields\n\nThis encapsulates a bunch if previously public fields in\nwyil.lang.Constant.  Also renames CodeForest =\u003e BytecodeForest.","event_type":"push"},{"id":123824037,"repository_id":4509743,"number":"468","state":"finished","result":1,"started_at":"2016-04-18T06:27:13Z","finished_at":"2016-04-18T06:45:36Z","duration":1103,"commit":"9da6c2fff76a482d18e4d4a3fc3d741360f2f26d","branch":"feature/502-bytecodes","message":"WyIL: Remove CodeUtils\n\nSome of the stuff in CodeUtils was deadcode.  A few other bits are\nrelated to labels and will become deadcode.  For now I've those things\ninto specific classes that use them and will remove when labels are\ngone.","event_type":"push"},{"id":123823104,"repository_id":4509743,"number":"467","state":"finished","result":1,"started_at":"2016-04-18T06:18:23Z","finished_at":"2016-04-18T06:37:15Z","duration":1132,"commit":"f3063e57d1ffe62f167f87c65299158fffa1d149","branch":"feature/502-bytecodes","message":"WyIL: Encapsulate fields \u0026 remove remap/registers\n\nSeveral publis fields in the Bytecode subclasses have been encapsulated\nto try and make things more consistent.  Also, removed the remap method\nas this is no longer used, and likewise for the registers() method","event_type":"push"},{"id":123538788,"repository_id":4509743,"number":"466","state":"finished","result":1,"started_at":"2016-04-16T10:41:30Z","finished_at":"2016-04-16T10:59:38Z","duration":1088,"commit":"9b9190d9cded76c4e7c1ed8383673a839001ca3f","branch":"feature/502-bytecodes","message":"Add explicit Not operator #502\n\nThis adds an explicit Operator kind for logical not expressions.  This\ncan simplify code generation in some situations.","event_type":"push"},{"id":120543597,"repository_id":4509743,"number":"465","state":"finished","result":0,"started_at":"2016-04-04T05:38:03Z","finished_at":"2016-04-04T05:57:10Z","duration":1147,"commit":"92a414c70f2b91e78580292427a94f2b500e62d0","branch":"feature/618-types","message":"Update Subtype unit tests\n\nThe unit tests RecordSubtypeTests and ArraySubtypeTests were quite out\nof data and contained many now invalid test cases.  These have been\nupdated and now all pass.","event_type":"push"},{"id":120391051,"repository_id":4509743,"number":"464","state":"finished","result":1,"started_at":"2016-04-03T07:32:46Z","finished_at":"2016-04-03T07:48:50Z","duration":964,"commit":"96378e97f746380f0376f911be1fbba519c5db5b","branch":"feature/618-types","message":"Add updated WyRL library\n\nUpdated to v0.4.5 of WyRL","event_type":"push"},{"id":120370854,"repository_id":4509743,"number":"463","state":"finished","result":1,"started_at":"2016-04-03T02:44:36Z","finished_at":"2016-04-03T03:03:57Z","duration":1161,"commit":"fdefd04529ddfc6c64a49a7266255adbcb61210e","branch":"feature/618-types","message":"Add updated WyRL library\n\nUpdated to v0.4.5 of WyRL","event_type":"push"},{"id":120370424,"repository_id":4509743,"number":"462","state":"finished","result":1,"started_at":"2016-04-03T02:35:36Z","finished_at":"2016-04-03T02:37:38Z","duration":122,"commit":"2ef64da0da8eaa89eff6a3b73abd8c1b589bd10d","branch":"feature/618-types","message":"Add preliminary subtype test #618\n\nThis adds an implementation of subtyping which employs the latest\nversion of WyAutl and is based on a set of WyRL rules.  This extension\nconsists only of a conversion procedure from old Automaton to new\nAutomaton, along with a subtype operator.  This subtype operator can\nthen be compared with the old one to check for consistency.","event_type":"push"},{"id":120342259,"repository_id":4509743,"number":"461","state":"finished","result":1,"started_at":"2016-04-02T21:46:30Z","finished_at":"2016-04-02T21:48:35Z","duration":125,"commit":"70f3b7980226f0f74c9a46747ec50228edccdb29","branch":"feature/618-types","message":"Add preliminary subtype test #618\n\nThis adds an implementation of subtyping which employs the latest\nversion of WyAutl and is based on a set of WyRL rules.  This extension\nconsists only of a conversion procedure from old Automaton to new\nAutomaton, along with a subtype operator.  This subtype operator can\nthen be compared with the old one to check for consistency.","event_type":"push"},{"id":120216515,"repository_id":4509743,"number":"460","state":"finished","result":1,"started_at":"2016-04-02T01:21:09Z","finished_at":"2016-04-02T01:22:43Z","duration":94,"commit":"a5f52be164b27b7adca63f0ed49d810b233d473e","branch":"feature/618-types","message":"Add preliminary subtype test #618\n\nThis adds a preliminary implementation of the alternative subtype test.\nIt's not completely working yet though.","event_type":"push"}]